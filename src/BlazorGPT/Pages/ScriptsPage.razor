@page "/scripts"
@page "/scripts/{ScriptId:guid}"

@attribute [Authorize]
<PageTitle>Scripts</PageTitle>
<div class="container-fluid">
    <div class="row">
        <h3>Scripts</h3>

    </div>
    
    <div class="row">
        <div class="col">
  
            
            <div class="row">
                <div class="col-12 col-md-4">

                    <div class="row py-3">
                        <div class="col-12">
                            <RadzenTextBox @bind-Value="newName" Class="textarea-full-width" Placeholder="Enter name" />

                            <RadzenButton Click="CreateScript" Class="textarea-full-width">Create script</RadzenButton>

                        </div>
                    </div>
                    @if (Scripts.Any())
                    {
                        <div>
                            Click on a Script below to edit.
                        </div>
                    }


                    <div class="row mt-3">
                        <div class="col" id="script-list">
                            <RadzenDataGrid Class="hide-grid-header" @ref="_grid" TItem="Script" Data="@Scripts"
                                            AllowPaging="true"
                                            PageSize="5"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            RowSelect="OnSelect"
                                            @bind-Value=@selectedScripts EditMode="DataGridEditMode.Single"
                                            EmptyText="You don't have any scripts. Create one above.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Script" Property="Name" Title="Name">
                                        <Template Context="script">
                                            @script.Name
                                        </Template>
                                        <EditTemplate Context="script">
                                            <RadzenTextBox @bind-Value="@script.Name"></RadzenTextBox>
                                        </EditTemplate>

                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Script" TextAlign="TextAlign.End">
                                        <Template Context="script">
                                            @*<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small" Click="@(args => EditRow(script))" @onclick:stopPropagation="true" />*@
                                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Size="ButtonSize.Small" Click="async () => await Del(script)" @onclick:stopPropagation="true" />

                                        </Template>
                                        <EditTemplate Context="script">
                                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" Size="ButtonSize.Small" Click="@(args => SaveRow(script))" />
                                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small" class="my-1 ms-1" Click="@(args => CancelEdit(script))" />

                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                </Columns>

                            </RadzenDataGrid>

                        </div>
                    </div>

                </div>
                <div class="col-12 col-md-8">
                    @if (selectedScripts != null && selectedScripts.Any())
                    {

                        <ScriptEditor ScriptId="SelectedScript.Id"></ScriptEditor>


                    }
                </div>

            </div>


            <hr />


            <RadzenCard class="col-12 col-md-8">


                <RadzenText TextStyle="TextStyle.Subtitle1">
                    For each Script, define one or more Script Steps.

                </RadzenText>

                <RadzenText TextStyle="TextStyle.Body2">
                    Each step will be executed in order as a follow up question/instruction to the previous step.
                </RadzenText>
            </RadzenCard>
            <RadzenCard class="col-12 col-md-8">

                <RadzenText TextStyle="TextStyle.Subtitle1">If your first step includes {0} your prompt will be inserted there.</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    Example: Your script step is "Write an blog post about {0}" <br />
                    And your prompt is "Jerry Seinfeld" the message sent is "Write an blog post about Jerry Seinfeld"<br />

                </RadzenText>
             

            </RadzenCard>


        </div>
        </div>
</div>


@code {

    [Parameter] public Guid? ScriptId { get; set; }
    
    [Inject]
    public ScriptRepository ScriptRepository { get; set; }

    [Inject]
    public DialogService DialogService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public NotificationService NotificationService{ get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public string? UserId { get; set; } = null!;


    RadzenDataGrid<Script>? _grid;

    public List<Script> Scripts { get; set; } = new List<Script>();
    private IList<Script>? selectedScripts;
    string newName = "";



    public override Task SetParametersAsync(ParameterView parameters)
    {
        return base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            }
        }
    

        if (ScriptId.HasValue)
        {
            var script = Scripts.FirstOrDefault(s => s.Id == ScriptId);
            if (script != null)
            {
                selectedScripts = new List<Script>() { script };
            }
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
             await LoadScripts();
        }
    }

    public async Task LoadScripts()
    {
        var res = await ScriptRepository.GetScripts(UserId);
        Scripts = res;
        await _grid!.Reload();
        StateHasChanged();
    }

    private async Task CreateScript()
    {
        if (newName != "")
        {
            var res = await ScriptRepository.CreateScript(UserId, newName);
            newName = "";
            await LoadScripts();

        }
    }
    // get first selected script
    private Script? SelectedScript => selectedScripts?.FirstOrDefault();


    private async Task<EventCallback> Del(Script script)
    {
        var result = await DialogService.Confirm("Are you sure you want to delete this script?", "Delete script", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result.HasValue && result.Value)
        {
            await ScriptRepository.DeleteScript(script.Id);
        }

        await LoadScripts();

        NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Script deleted", Detail = "Script deleted" });

        return EventCallback.Empty;
    }

    private async Task EditRow(Script script)
    {
        await _grid.EditRow(script);

    }

    private async Task SaveRow(Script script) {
        await ScriptRepository.SaveScript(script);
        _grid!.CancelEditRow(script);

    }

    private async Task CancelEdit(Script script)
    {
        _grid!.CancelEditRow(script);
        await LoadScripts();
    }

    private void OnSelect(Script arg)
    {

         NavigationManager.NavigateTo($"/scripts/{arg.Id}");
    }

}