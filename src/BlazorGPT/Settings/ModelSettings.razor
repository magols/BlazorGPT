@using BlazorGPT.Pipeline
@using Microsoft.Extensions.Options

@inject IOptions<PipelineOptions> PipelineOptions

<RadzenTabs>

    <Tabs>
        <RadzenTabsItem Text="Chat">
            
            
            <div class="container border p-3 m-0">
                <div class="row">

                    <div class="col">
                        <strong>Provider</strong>
                    </div>        
                </div>
                <RadzenRadioButtonList TValue="ChatModelsProvider" @bind-Value=@model.Provider Change="OnModelsProviderChange">
                    <Items>
                        @if (!PipelineOptions.Value.Providers.OpenAI.ApiKey.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="OpenAI" Value="@ChatModelsProvider.OpenAI"/>
                        }
                        @if (!PipelineOptions.Value.Providers.AzureOpenAI.ApiKey.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="AzureOpenAI" Value="@ChatModelsProvider.AzureOpenAI"/>
                        }
                        @if (!PipelineOptions.Value.Providers.Ollama.ChatModel.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="Ollama" Value="@ChatModelsProvider.Ollama"/>
                        }
                        @if (!PipelineOptions.Value.Providers.GoogleAI.ChatModel.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="Google" Value="@ChatModelsProvider.GoogleAI" />
                        }

                    </Items>
                </RadzenRadioButtonList>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText Class="mt-3">Model</RadzenText>
                    </div>
                    <div class="col-9">
                        <RadzenDropDown TValue="string"
                                        Change="Save"
                                        Style="font-size: small;"
                                        TValue="string"
                                        Data="_models"@bind-Value="@model.Model"/>
                    </div>
                </div>


   
            </div>



            <!-- parameters -->
            <div class="container border p-3 m-0">
                <div class="row">
                    <div class="col">
                        <strong>Parameters</strong>
                    </div>
                </div>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText>Max tokens</RadzenText>

                    </div>
                    <div class="col-9">
                        <RadzenNumeric Change="Save" TValue="int" @bind-Value="@model.MaxTokens" Max="10000" Step="1"></RadzenNumeric>
                    </div>
                </div>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText>Temperature</RadzenText>
                    </div>
                    <div class="col-1">
                        <RadzenText>@model.Temperature</RadzenText>
                    </div>
                    <div class="col-8">
                        <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.Temperature" Min="0" Max="1" Step="0.01" Class="me-3" />
                    </div>
                </div>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText>Top P</RadzenText>
                    </div>
                    <div class="col-1">
                        <RadzenText>@model.TopP</RadzenText>
                    </div>
                    <div class="col-8">
                        <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.TopP" Min="0" Max="1" Step="0.01" Class="me-3" />
                    </div>
                </div>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText>Frequency penalty</RadzenText>
                    </div>
                    <div class="col-1">
                        <RadzenText>@model.FrequencyPenalty</RadzenText>
                    </div>
                    <div class="col-8">
                        <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.FrequencyPenalty" Min="0" Max="2.01m" Step="0.01" Class="me-3" />
                    </div>
                </div>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText>Presence penalty</RadzenText>
                    </div>
                    <div class="col-1">
                        <RadzenText>@model.PresencePenalty</RadzenText>
                    </div>
                    <div class="col-8">
                        <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.PresencePenalty" Min="0" Max="2.01m" Step="0.01" Class="me-3" />
                    </div>
                </div>

            </div>
        </RadzenTabsItem>
        
        <RadzenTabsItem Text="Embeddings">
            
            <div class="container border p-3 m-0">
                <div class="row">

                    <div class="col">
                        <strong>Provider</strong>
                    </div>        
                </div>
                <RadzenRadioButtonList TValue="EmbeddingsModelProvider" @bind-Value=@model.EmbeddingsProvider Change="OnEmbeddingsModelsProviderChange">
                    <Items>
                        @if (!PipelineOptions.Value.Providers.OpenAI.ApiKey.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="OpenAI" Value="@EmbeddingsModelProvider.OpenAI"/>
                        }
                        @if (!PipelineOptions.Value.Providers.AzureOpenAI.ApiKey.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="AzureOpenAI" Value="EmbeddingsModelProvider.AzureOpenAI"/>
                        }
            
                        @if ((!PipelineOptions.Value.Providers.Ollama.ChatModel.IsNullOrEmpty()))
                        {
                            <RadzenRadioButtonListItem Text="Ollama" Value="EmbeddingsModelProvider.Ollama"/>
                        }
                        
                        @if (!PipelineOptions.Value.Providers.GoogleAI.ChatModel.IsNullOrEmpty())
                        {
                            <RadzenRadioButtonListItem Text="Google" Value="EmbeddingsModelProvider.GoogleAI" />
                        }
                    </Items>
                </RadzenRadioButtonList>
                <div class="row m-3">
                    <div class="col-3">
                        <RadzenText Class="mt-3">Model</RadzenText>
                    </div>
                    <div class="col-9">
                        <RadzenDropDown TValue="string"
                                        Change="Save"
                                        Style="font-size: small;"
                                        TValue="string"
                                        Data="_embeddingsModels"@bind-Value="@model.EmbeddingsModel"/>
                    </div>
                </div>
            </div>
        </RadzenTabsItem>

    </Tabs>

</RadzenTabs>




@code {


    public string? SelectedModel { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Inject]
    ModelConfigurationService? ModelConfigurationService { get; set; }
    ModelConfiguration model = new();

    
 
    string[] _models;
    private string[]? _embeddingsModels;


    private void SetModels(bool setDefault = false)
    {
        switch (model.Provider)
        {
            case ChatModelsProvider.OpenAI:
                if(setDefault) model.Model = PipelineOptions.Value.Providers.OpenAI.ChatModel;
                _models = PipelineOptions.Value.Providers.OpenAI.ChatModels;
                break;
            case ChatModelsProvider.AzureOpenAI:
                if (setDefault) model.Model = PipelineOptions.Value.Providers.AzureOpenAI.ChatModel;
                _models = PipelineOptions.Value.Providers.AzureOpenAI.ChatModels.Select(o => o.Value).ToArray();
                break;

            case ChatModelsProvider.Ollama:
                if (setDefault) model.Model = PipelineOptions.Value.Providers.Ollama.ChatModel;
                _models = PipelineOptions.Value.Providers.Ollama.Models;
                break;

            case ChatModelsProvider.GoogleAI:
                if (setDefault) model.Model = PipelineOptions.Value.Providers.GoogleAI.ChatModel;
                _models = PipelineOptions.Value.Providers.GoogleAI.ChatModels;
                break;
            default:
                throw new ArgumentOutOfRangeException();
            
        }
        SelectedModel = model.Model;
        StateHasChanged();

    }

    private async Task OnModelsProviderChange()
    {
        SetModels(true);
        await Save();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            model =  await ModelConfigurationService!.GetConfig();
            SetModels();
            SetEmbeddingsModels();
        }
    }

    public async Task Save()
    {
        await ModelConfigurationService?.SaveConfig(model)!;
    }

    private async Task OnEmbeddingsModelsProviderChange(EmbeddingsModelProvider arg)
    {

        SetEmbeddingsModels(true);
        await Save();
    }

    public string? SelectedEmbeddingsModel { get; set; }

    private void SetEmbeddingsModels(bool setDefault = false)
    {
        switch (model.EmbeddingsProvider)
        {
            case EmbeddingsModelProvider.OpenAI:
                if (setDefault) model.EmbeddingsModel = PipelineOptions.Value.Providers.OpenAI.EmbeddingsModel;
                _embeddingsModels = PipelineOptions.Value.Providers.OpenAI.EmbeddingsModels;
                break;
            case EmbeddingsModelProvider.AzureOpenAI:
                if (setDefault) model.EmbeddingsModel = PipelineOptions.Value.Providers.AzureOpenAI.EmbeddingsModel;
                _embeddingsModels = PipelineOptions.Value.Providers.AzureOpenAI.EmbeddingsModels.Select(o => o.Value).ToArray();
                break;

            case EmbeddingsModelProvider.Ollama:
                if (setDefault) model.EmbeddingsModel = PipelineOptions.Value.Providers.Ollama.EmbeddingsModel;
                _embeddingsModels = PipelineOptions.Value.Providers.Ollama.EmbeddingsModels;
                break;

            case EmbeddingsModelProvider.GoogleAI:
                if (setDefault) model.EmbeddingsModel = PipelineOptions.Value.Providers.GoogleAI.EmbeddingsModel;
                _embeddingsModels = PipelineOptions.Value.Providers.GoogleAI.EmbeddingsModels;
                break;
            default:
                throw new ArgumentOutOfRangeException();
            
        }
        SelectedEmbeddingsModel = model.EmbeddingsModel;
        StateHasChanged();
    }

}